#!/usr/bin/env bash
#
# Copyright (c) 2016-2020 Ataraxia Linux <ataraxialinux@protonmail.com>

# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.

# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

umask 022
unalias -a

pushd() { command pushd "$1" > /dev/null; }
popd() { command popd "$1" > /dev/null; }
msg() { printf "\033[1;34m::\033[0m %s\n" "$@"; }
warn() { printf "\033[1;33m::\033[0m %s\n" "$@"; }
die() { printf "\033[1;31m::\033[0m %s\n" "$@"; exit 1; }

check_root() {
	if [[ $EUID -ne 0 ]]; then
		die "You must be root to run 'neko'"
	fi
}

get_filename() {
	local tgt

	if echo "$1" | grep -q -E '^((https|http|ftp|rtsp|mms|file)?:\/\/).+'; then
		if echo $1 | grep -q '::archive='; then
			tgt="$(echo $FILE | sed -e 's/::archive=/ /g' | awk '{print $2}')"
		else
			tgt="$(basename $1)"
		fi
		echo "$SRCDEST/$tgt"
	else
		echo "$1"
	fi
}

find_portdir() {
	local pkg="$1"

	for myrepos in ${REPOS[@]}; do
		if [ -d "$myrepos/$pkg" ]; then
			echo "$myrepos/$pkg"
			break
		fi
	done
}

find_portver() {
	local port="$(find_portdir $1)/KagamiBuild"
	local portver="$(grep ^version $port | sed -e 's/version=//g')"
	local portrel="$(grep ^release $port | sed -e 's/release=//g')"

	echo "$portver-$portrel"
}

find_instver() {
	local instver="$(rpm -q --qf '%{VERSION}\n' $rootopt --dbpath /var/lib/rpm $1)"
	local instrel="$(rpm -q --qf '%{RELEASE}\n' $rootopt --dbpath /var/lib/rpm $1)"

	echo "$instver-$instrel"
}

source_config() {
	if [ ! -f "$config" ]; then
		die "Failed to source the configuration file"
	fi

	source "$config"

	[ "$BARCH" ] || die "Specify CPU architecture"
}

source_recipe() {
	unset name version release options backup source noextract depends
	unset -f build
	local myport fakedep

	if [ -f "$topdir/KagamiBuild" ]; then
		myport="$topdir/KagamiBuild"
	elif [ -f "$topdir/Pkgfile" ]; then
		myport="$topdir/Pkgfile"
	else
		die "Failed to source the package recipe"
	fi

	source "$myport"

	depends="$(npk-parse $myport "# Depends on:")"
	if [ ! -z "$(npk-parse $myport "# Dep $BARCH:")" ]; then
		depends="$depends $(npk-parse $myport "# Dep $BARCH:")"
	fi
	weakdeps="$(npk-parse $myport "# Weak deps:")"
	conflicts="$(npk-parse $myport "# Conflicts with:")"
	provides="$(npk-parse $myport "# Provides:")"
	obsoletes="$(npk-parse $myport "# obsoletes:")"
	summary="$(npk-parse $myport "# Description:")"
	url="$(npk-parse $myport "# URL:")"
	section="$(npk-parse $myport "# Section:")"
	priority="$(npk-parse $myport "# Priority:")"
	maintainer="$(npk-parse $myport "# Maintainer:" | sed -e 's/, / /g' | sed -e 's/ at /@/g' | sed -e 's/ dot /./')"
	license="(null)"

	if [ "$bootstrap" = "yes" ]; then
		if [ -z "$summary" ]; then
			summary="(null)"
		fi
		if [ -z "$section" ]; then
			section="misc"
		fi
	fi

	if [ -z "$name" ]; then
		die "The name of package is not set"
	elif [ -z "$version" ]; then
		die "The version of package is not set"
	elif [ -z "$release" ]; then
		die "The release of package is not set"
	elif [ -z "$summary" ]; then
		die "The summary of package is not set"
	elif [ -z "$section" ]; then
		die "The section of package is not set"
	fi
}

parse_options() {
	for myopts in ${OPTIONS[@]} ${options[@]}; do
		case $myopts in
			bootstrap) opt_bootstrap="1" ;;
			~bootstrap) opt_bootstrap="0" ;;
			ccache) opt_ccache="1" ;;
			~ccache) opt_ccache="0" ;;
			docs) opt_docs="1" ;;
			~docs) opt_docs="0" ;;
			emptydirs) opt_emptydirs="1" ;;
			~emptydirs) opt_emptydirs="0" ;;
			libtool) opt_libtool="1" ;;
			~libtool) opt_libtool="0" ;;
			locales) opt_locales="1" ;;
			~locales) opt_locales="0" ;;
			makeflags) opt_makeflags="1" ;;
			~makeflags) opt_makeflags="0" ;;
			strip) opt_strip="1" ;;
			~strip) opt_strip="0" ;;
		esac
	done
}

download_file() {
	local url="$1"

	if [ ! "$(type -p curl)" ]; then
		die "curl wasn't found"
	fi

	msg "Downloading $url"
	LOCAL_FILENAME=`get_filename $FILE`

	LOCAL_FILENAME_PARTIAL="$LOCAL_FILENAME.partial"
	cmd="-f --retry 3 --retry-delay 3 -L -o $LOCAL_FILENAME_PARTIAL $CURLOPTS"
	resumecmd="-C -"
	fullcmd="curl $cmd"
	RESUME="no"

	if [ -f "$LOCAL_FILENAME_PARTIAL" ]; then
		warn "Partial download found, trying to resume"
		RESUME="yes"
		fullcmd="$fullcmd $resumecmd"
	fi

	error=1

	if [ $error != 0 ]; then
		while true; do
			$fullcmd $url
			error=$?
			if [ $error != 0 ] && [ "$RESUME" = "yes" ]; then
				warn "Partial download failed, restarting"
				rm -f "$LOCAL_FILENAME_PARTIAL"
				RESUME="yes"
			else
				break
			fi
		done
	fi

	if [ $error != 0 -o ! -f "$LOCAL_FILENAME_PARTIAL" ]; then
		die "Downloading '${url}' failed."
	fi

	mv -f "$LOCAL_FILENAME_PARTIAL" "$LOCAL_FILENAME"
}

download_source() {
	local FILE LOCAL_FILENAME tgt cursum newsum checkresult url ifile iversion autover

	if [ -n "$source" ]; then
		for FILE in ${source[@]}; do
			if echo "$FILE" | grep -q -E '^((git)?:\/\/).+' || echo "$FILE" | grep -q -E '.*\.git$'; then
				if echo $FILE | grep -q '::checkout='; then
					url="$(echo $FILE | sed -e 's/::checkout=/ /g' | awk '{print $1}')"
					iversion="$(echo $FILE | sed -e 's/::checkout=/ /g' | awk '{print $2}')"
					autover="1"
				else
					url="$FILE"
					autover="0"
				fi

				tgt="$(basename $url)"

				if [ ! -d "$SRC/$tgt" ]; then
					msg "Cloning $url"
					git clone $GITOPTS $url "$SRC/$tgt"
					if [ $? -ne 0 ]; then
						die  "Failed to clone: $url"
					fi
					if [ "$autover" == "1" ]; then
						msg "Checking out version to $iversion"
						pushd "$SRC/$tgt"
							git checkout tags/${iversion} -b branch
						popd
						if [ $? -ne 0 ]; then
							die  "Failed to check out version for $url"
						fi
					fi
				fi
			elif echo "$FILE" | grep -q -E '^((https|http|ftp|rtsp|mms)?:\/\/).+'; then
				if echo $FILE | grep -q '::archive='; then
					url="$(echo $FILE | sed -e 's/::archive=/ /g' | awk '{print $1}')"
					LOCAL_FILENAME=`get_filename $FILE`
				else
					url="$FILE"
					LOCAL_FILENAME=`get_filename $FILE`
				fi
				if [ ! -e $LOCAL_FILENAME ]; then
					if [ "$LOCAL_FILENAME" = "$FILE" ]; then
						die "Source file '$LOCAL_FILENAME' not found (can not be downloaded, URL not specified)."
					else
						download_file $url
					fi
				fi
			fi
		done
	fi
}

unpack_source() {
	local ifile

	if [ "$source" ]; then
		for FILE in ${source[@]}; do
			if echo "$FILE" | grep -q -E '^((git)?:\/\/).+' || echo "$FILE" | grep -q -E '.*\.git$'; then
				return 0
			fi

			if echo $FILE | grep -q '::archive='; then
				ifile="$(echo $FILE | sed -e 's/::archive=/ /g' | awk '{print $2}')"
				FILENAME="$(basename $ifile)"
			else
				FILENAME="$(basename $FILE)"
			fi
			LOCAL_FILENAME=`get_filename $FILE`

			if [ "$nosums" != "yes" ] && [ -f "$topdir/.hashsums" ]; then
				echo -en "\e[34m::\033[0m Checking source integrity for $FILENAME"
				cursum="$(cat $topdir/.hashsums | grep $FILENAME | awk '{print $1}')"
				newsum="$(b2sum $LOCAL_FILENAME | awk '{print $1}')"
				if [ "$cursum" != "$newsum" ]; then
					echo -e "\e[31m FAIL\033[0m"
					exit 1
				else
					echo -e "\e[32m SUCCESS\033[0m"
				fi
			fi
		done

		for FILE in ${source[@]}; do
			if echo "$FILE" | grep -q -E '^((git)?:\/\/).+' || echo "$FILE" | grep -q -E '.*\.git$'; then
				return 0
			fi

			if echo $FILE | grep -q '::archive='; then
				ifile="$(echo $FILE | sed -e 's/::archive=/ /g' | awk '{print $2}')"
				FILENAME="$(basename $ifile)"
			else
				FILENAME="$(basename $FILE)"
			fi
			LOCAL_FILENAME=`get_filename $FILE`

			for NOEXT in ${noextract[@]}; do
				if [ "$NOEXT" = "$FILENAME" ]; then
					nxt=1
					break
				fi
			done

			if [ "$FILENAME" != "$FILE" ] && [ "$nxt" != 1 ]; then
				case $LOCAL_FILENAME in
					*.tar|*.tar.gz|*.tar.Z|*.tgz|*.tar.bz2|*.tbz2|*.tar.xz|*.txz|*.tar.lzma|*.tar.lz|*.tlz|*.tar.lz4|*.tar.zst|*.tar.zstd|*.zip|*.rpm|*.7z)
						msg "Extracting $FILENAME to the sources directory"
						bsdtar -p -o -C "$SRC" -xf $LOCAL_FILENAME || die "Failed to extract $FILENAME to the sources directory"
						;;
					*)
						msg "Copying $FILENAME to the sources directory"
						cp $LOCAL_FILENAME "$SRC" || die "Failed to copy $FILENAME to the sources directory"
						;;
				esac
			else
				case $LOCAL_FILENAME in
					*)
						msg "Copying $FILENAME to the sources directory"
						cp $LOCAL_FILENAME "$SRC" || die "Failed to copy $FILENAME to the sources directory"
						;;
				esac
			fi
			nxt=
		done
	fi
}

run_strip() {
	local fs="$1"

	( cd "$fs"
		find . | xargs file | grep "executable" | grep ELF | cut -f 1 -d : | xargs ${CROSS_COMPILE}strip --strip-all 2>/dev/null
		find . | xargs file | grep "shared object" | grep ELF | cut -f 1 -d : | xargs ${CROSS_COMPILE}strip --strip-unneeded 2>/dev/null
		find . | xargs file | grep "current ar archive" | cut -f 1 -d : | xargs ${CROSS_COMPILE}strip --strip-debug 2>/dev/null
	)
}

setup_compiler() {
	if [ -n "$CC" ]; then
		MYCC="$CC"
	else
		MYCC="gcc"
	fi
	if [ -n "$CXX" ]; then
		MYCXX="$CXX"
	else
		MYCXX="g++"
	fi
}

compile_package() {
	local FILE DIR TARGET

	if [ "$opt_makeflags" != "0" ]; then
		export MAKEFLAGS="$MKOPTS"
		export NINJA_OPTIONS="$MKOPTS"
	fi

	if [ "$bootstrap" != "yes" ]; then
		if [ "$opt_ccache" != "0" ]; then
			if type ccache > /dev/null 2>&1; then
				if [ -f "/usr/lib/ccache/bin/${CC}" ]; then
					MYCC="/usr/lib/ccache/bin/${CC}"
				else
					MYCC="/usr/lib/ccache/bin/gcc"
				fi
				if [ -f "/usr/lib/ccache/bin/${CXX}" ]; then
					MYCXX="/usr/lib/ccache/bin/${CXX}"
				else
					MYCXX="/usr/lib/ccache/bin/g++"
				fi
			else
				setup_compiler
			fi
			if type sccache > /dev/null 2>&1; then
				export RUSTC_WRAPPER="$(which sccache)"
			fi
		else
			setup_compiler
		fi
	fi

	if type build > /dev/null 2>&1; then
		msg "Compiling package"
		pushd "$SRC"
			(
				set -e
				if [ "$bootstrap" != "yes" ]; then
					export CC="$MYCC"
					export CXX="$MYCXX"
				fi
				build
			)
			if [ $? -ne 0 ]; then
				die  "Failed to compile package: $name"
			fi
		popd
	fi

	pushd "$PKG"
		mkdir -p "$SRC"/loc "$SRC"/libloc "$SRC"/helploc

		msg "Removing junk from package"
		rm -rf {,usr/}{,local/}{,share/}info usr{,/local}{,/share},opt/*}/info
		rm -rf {,usr/}{,local/}lib/charset.alias

		find . -name "*.pod" -print0 | xargs -0 rm -rf
		find . -name ".packlist" -print0 | xargs -0 rm -rf

		if [ "$opt_libtool" = "0" ]; then
			msg "Removing libtool files"
			find . -name "*.la" -print0 | xargs -0 rm -rf
		fi

		if [ "$opt_emptydirs" = "0" ]; then
				msg "Removing empty directories"
				find . -maxdepth 3 -type d -exec rmdir {} + 2>/dev/null
		fi

		if [ "$opt_locales" = "0" ]; then
			msg "Removing locales"
			rm -rf {,usr/}{,local/}{,share/,lib/}locale
		fi

		if [ "$opt_docs" = "0" ]; then
			msg "Removing documentation"
			rm -rf {,usr/}{,local/}{,share/}doc usr/{,local/}{,share/}{doc,gtk-doc} opt/*/{doc,gtk-doc}
		fi

		if [ -d "$PKG/usr/share/help" ]; then
			pushd usr/share/help
				mv C "$SRC"/

				rm -rf *

				mv "$SRC"/C .
			popd
		fi

		if [ "$opt_strip" != "0" ]; then
			msg "Removing debug information from binary files"
			run_strip "$PKG"
		fi

		msg "Compressing manual pages"
		find . -type f -path "*/man/man*/*" | while read FILE; do
			if [ "$FILE" = "${FILE%%.gz}" ]; then
				gzip -9 "$FILE"
			fi
		done

		find . -type l -path "*/man/man*/*" | while read FILE; do
			TARGET=`readlink -n "$FILE"`
			TARGET="${TARGET##*/}"
			TARGET="${TARGET%%.gz}.gz"
			rm -f "$FILE"
			FILE="${FILE%%.gz}.gz"
			DIR=`dirname "$FILE"`

			if [ -e "$DIR/$TARGET" ]; then
				ln -sf "$TARGET" "$FILE"
			fi
		done
	popd
}

create_package() {
	local trigdirs trigcommand
	local RPMSOURCEDIR="$(rpm --eval=%_topdir)"
	local RPMPKG="${RPMSOURCEDIR}/RPMS/$BARCH/$name-$version-$release.$BARCH.rpm"
	local SPECFILE="$WORK/$name.spec"

	mkdir -p "$RPMSOURCEDIR"/{BUILD,RPMS/$BARCH,SOURCES,SPECS,SRPMS}

	pushd "$WORK"
		msg "Generating package"
		echo "Name: $name" >> "$SPECFILE"
		echo "Version: $version" >> "$SPECFILE"
		echo "Release: $release" >> "$SPECFILE"
		echo "Summary: $summary" >> "$SPECFILE"
		echo "Group: $section" >> "$SPECFILE"
		echo "License: $license" >> "$SPECFILE"
		[ "$url" ] && echo "URL: $url" >> "$SPECFILE"

		echo >> "$SPECFILE"

		if [ -n "$conflicts" ]; then
			for myconfl in $conflicts; do
				echo "Conflicts: $myconfl" >> "$SPECFILE"
			done
		fi
		if [ -n "$provides" ]; then
			for myprov in $provides; do
				echo "Provides: $myprov" >> "$SPECFILE"
			done
		fi
		if [ -n "$obsoletes" ]; then
			for myobsol in $obsoletes; do
				echo "Obsoletes: $myobsol" >> "$SPECFILE"
			done
		fi
		if [ -n "$depends" ]; then
			for mydeps in $depends; do
				echo "Requires: $mydeps" >> "$SPECFILE"
			done
		fi
		if [ -n "$weakdeps" ]; then
			for myweakdeps in $weakdeps; do
				echo "Suggests: $myweakdeps" >> "$SPECFILE"
			done
		fi
		echo "AutoReqProv: no" >> "$SPECFILE"
		echo >> "$SPECFILE"

		echo '%description' >> "$SPECFILE"
		echo "$summary" >> "$SPECFILE"
		echo  >> "$SPECFILE"

		if [ -f "$topdir/pre-install" ]; then
			echo "%pre" >> "$SPECFILE"
			cat "$topdir/pre-install"  >> "$SPECFILE"
			echo  >> "$SPECFILE"
		fi

		if [ -f "$topdir/post-install" ]; then
			echo "%post" >> "$SPECFILE"
			cat "$topdir/post-install"  >> "$SPECFILE"
			echo  >> "$SPECFILE"
		fi

		if [ -f "$topdir/pre-remove" ]; then
			echo "%preun" >> "$SPECFILE"
			cat "$topdir/pre-remove"  >> "$SPECFILE"
			echo  >> "$SPECFILE"
		fi

		if [ -f "$topdir/post-remove" ]; then
			echo "%postun" >> "$SPECFILE"
			cat "$topdir/post-remove"  >> "$SPECFILE"
			echo  >> "$SPECFILE"
		fi

		if [ -f "$topdir/trigger" ]; then
			cat "$topdir/trigger"  >> "$SPECFILE"
			echo  >> "$SPECFILE"
		fi

		if [ ! -z "$(ls $PKG)" ]; then
			echo '%files' >> "$SPECFILE"
			echo '%defattr(-,root,root)' >> "$SPECFILE"
			if [ "$backup" ]; then
				for mybackup in ${backup[@]}; do
					echo "%config(noreplace) /${mybackup}" >> "$SPECFILE"
				done
			fi
			if [ "$exclude" ]; then
				for myexclude in ${exclude[@]}; do
					echo "%exclude /${mybackup}" >> "$SPECFILE"
				done
			fi
			echo '/*' >> "$SPECFILE"
			echo  >> "$SPECFILE"
		fi

		echo '%changelog' >> "$SPECFILE"
		echo "* $(date "+%a %b %d %Y") $(echo $maintainer | awk '{print $1}') <$(echo $maintainer | awk '{print $2}')>" >> "$SPECFILE"
		echo "- Initial package" >> "$SPECFILE"

		rpmbuild -bb \
			--define "%_binary_payload w19.zstdio" \
			--define "%_binary_filedigest_algorithm 8" \
			--define "%_pkgverify_level digest" \
			--define "%_minimize_writes 0" \
			--define "%_build_id_links none" \
			--target $BARCH \
			--buildroot="$PKG" \
			--clean \
			"$SPECFILE"
		if [ $? -ne 0 ]; then
			die  "Failed to create package: $name"
		fi

		mv "$RPMPKG" "$TARGET"

		msg "Package was successfuly built"
	popd
}

npk_build() {
	source_recipe

	if [ -z "$PKGDEST" ]; then
		PKGDEST="$topdir"
	fi
	if [ -z "$SRCDEST" ]; then
		SRCDEST="$topdir"
	fi

	TARGET="$PKGDEST/$name-$version-$release.$BARCH.rpm"

	if [ "$force" = "yes" ]; then
		rm -rf "$TARGET"
	fi

	if [ ! -f "$TARGET" ]; then
		msg "Building package: $name"
		echo -ne "\033]0;Compiling package: ${name}\007"

		WORK="$PWD/work"
		PKG="$WORK/pkg"
		SRC="$WORK/src"

		rm -rf "$WORK"
		mkdir -p "$PKG" "$SRC"

		parse_options

		if [ "$bootstrap" = "yes" ]; then
			if [ "$opt_bootstrap" = "0" ]; then
				die "This package couldn't be built in the cross environment"
			fi
		fi

		if [ "$nodownload" != "yes" ]; then
			download_source
		fi

		if [ "$noextract" != "yes" ]; then
			unpack_source
		fi

		if [ "$nobuild" != "yes" ]; then
			compile_package
		fi

		if [ "$nopackage" != "yes" ]; then
			create_package
			if [ "$noclean" != "yes" ]; then
				rm -rf "$WORK"
			fi
		fi
		if [ "$noclean" != "yes" ]; then
			rm -rf "$WORK"
		fi
	else
		warn "Package have already built"
		return 0
	fi
}

npk_install() {
	if [ "$TARGET" ]; then
		local pkg="$TARGET"
	else
		local pkg="$1"
	fi

	msg "Checking package"

	[ ! -f "$pkg" ] && die "Your package file was not found or not specified"
	[ "${pkg##*.}" != "rpm" ] && die "This file does not end in .rpm"

	local localname="$(rpm -qi $pkg | grep -h Name | awk '{print $3}')"
	[ -z "$localname" ] && die "Your package is broken"

	rpm -K "$pkg" 2>&1 > /dev/null || die "Failed to check package signature"

	if [ "$rootdir" ] && [ ! -d "$rootdir" ]; then
		mkdir -p "$rootdir"
	fi

	if [ ! -d "$rootdir/var/lib/rpm" ]; then
		mkdir -p "$rootdir/var/lib/rpm"
		rpm $rootopt --dbpath /var/lib/rpm --initdb
	fi

	if [ "$(rpm -qa $rootopt --dbpath /var/lib/rpm $localname)" ]; then
		if [ "$needed" = "yes" ]; then
			warn "$localname: This package has been already installed"
			return 0
		else
			msg "Updating package: $localname"
			local update="true"
		fi
	else
		msg "Installing package: $localname"
		local update="false"
	fi

	trap "" INT

	if [ "$force" != "yes" ] && [ "$update" != "true" ]; then
		msg "Checking for file conflicts"
		if [ -z "$(rpm -qa $rootopt --dbpath /var/lib/rpm $localname)" ]; then
			for fileconflicts in $(rpm -qpl $pkg); do
				if [ -f "${rootdir}${fileconflicts}" ] || [ -L "${rootdir}${fileconflicts}" ]; then
					echo "$fileconflicts" >> /tmp/conflicts
				fi
			done
			if [ -f "/tmp/conflicts" ]; then
				warn "Following files couldn't be overwritten"
				cat /tmp/conflicts
				rm /tmp/conflicts
				exit 1
			fi
		fi
	fi

	if [ "$update" = "true" ]; then
		local installopt="-Uhv"
		if [ "$(rpm -qp $pkg)" = "$(rpm -qa $rootopt --dbpath /var/lib/rpm $localname)" ]; then
			installopt+=" --replacepkgs"
		fi
	else
		local installopt="-ivh"
	fi

	msg "Extracting package"
	rpm $installopt \
		$forceopt \
		$depopt \
		$scriptopt \
		$triggeropt \
		$bootopt \
		$rootopt --dbpath /var/lib/rpm \
		--define "%_binary_payload w19.zstdio" \
		--define "%_binary_filedigest_algorithm 8" \
		--define "%_pkgverify_level digest" \
		--define "%_minimize_writes 0" \
		$pkg

	if [ $? -ne 0 ]; then
		trap INT
		die  "Failed to install package"
	else
		msg "Package was successfully installed"
	fi

	trap INT
}

npk_remove() {
	local pkg="$1"

	[ -z "$pkg" ] && die "Your package was not specified"

	[ -z "$(rpm -qa $rootopt --dbpath /var/lib/rpm $localname)" ] && die "Your package is not installed"

	local localname="$(rpm -qi $rootopt --dbpath /var/lib/rpm $pkg | grep -h Name | awk '{print $3}')"
	[ -z "$localname" ] && die "Your package is not installed"

	msg "Removing package: $localname"

	trap "" INT

	rpm -ehv \
		$forceopt \
		$depopt \
		$scriptopt \
		$triggeropt \
		$rootopt --dbpath /var/lib/rpm \
		--define "%_minimize_writes 0" \
		$pkg
	if [ $? -ne 0 ]; then
		trap INT
		die  "Failed to remove package"
	else
		msg "Package was successfully removed"
	fi

	trap INT
}

npk_emerge() {
	local pkg="$1"
	local deps

	pushd "$(find_portdir $pkg)"
		export topdir="$PWD"
		source_recipe

		if [ "$noconflicts" != "yes" ]; then
			if [ "$conflicts" ]; then
				for myconflicts in $conflicts; do
	  				if [ "$(rpm -qa $rootopt --dbpath /var/lib/rpm $myconflicts)" ]; then
						warn "This package conflicts with $myconflicts"
					fi
				done
				exit 1
			fi
		fi
		if [ "$nodepends" != "yes" ]; then
			if [ "$depends" ]; then
				(
					for mydepends in $depends; do
	  					if [ -z "$(rpm -qa $rootopt --dbpath /var/lib/rpm $mydepends)" ]; then
							npk_emerge $mydepends
						fi
					done
				)
				if [ $? != 0 ]; then
					exit 1
				fi
			fi
		fi

		port="$(find_portdir $pkg)/KagamiBuild" \
			source_recipe
		npk_build
		if [ "$PACKAGE" != "no" ]; then
			if [ ! -f "$TARGET" ]; then
				die "Package file wasn't found"
			fi
			npk_install
		fi

		if [ "$nodepends" != "yes" ]; then
			if [ "$weakdeps" ]; then
				(
					for mywdepends in $weakdeps; do
	  					if [ -z "$(rpm -qa $rootopt --dbpath /var/lib/rpm $mywdepends)" ]; then
							npk_emerge $mywdepends
						fi
					done
				)
				if [ $? != 0 ]; then
					exit 1
				fi
			fi
		fi
	popd
}

npk_upgrade() {
	unset FORCE NEEDED

	FORCE="yes"
	NEEDED="no"

	msg "Checking for updates"
	rm -rf /tmp/updates

	for pkg in $(rpm -qa --queryformat='%{NAME}\n' $rootopt --dbpath /var/lib/rpm | sort -n | uniq); do
		if [ ! -z "$(find_portdir $pkg)" ]; then
			vercmp "$(find_instver $pkg)" "$(find_portver $(basename $pkg))"
			if [ $? = 255 ]; then
				echo "$(basename $pkg)" >> /tmp/updates
			fi
		fi
	done

	if [ ! -f "/tmp/updates" ]; then
		warn "No updates were found"
		rm -rf /tmp/updates
		exit 0
	fi

	msg "Following packages will be updated"
	for updated in $(cat /tmp/updates); do
		printf "[\e[0;32mUP\e[0m] $updated "
	done
	echo; echo

	(
		for updated in $(cat /tmp/updates); do
			if [ -z "$(cat $maskfile | grep -w $updated)" ]; then
				npk_emerge $updated
			fi
		done
	)
	if [ $? != 0 ]; then
		rm -rf /tmp/updates
		die "Failed to update your system"
	fi

	rm -rf /tmp/updates
	msg "System was updated successfuly!"
}

npk_search() {
	local pkg="$1"
	local portdir="$(find_portdir $pkg)"

	if [ -n "$portdir" ]; then
		export topdir="$portdir"
		source_recipe

		echo "Name: $name"
		echo "Version: $version"
		echo "Release: $release"
		echo "Summary: $summary"
		echo "Section: $section"
		[ -n "$url" ] && echo "URL: $url"
		[ -n "$depends" ] && echo "Requires: $depends"
		[ -n "$conflicts" ] && echo "Conflicts: $conflicts"
		[ -n "$provides" ] && echo "Provides: $provides"
		[ -n "$obsoletes" ] && echo "Obsoletes: $obsoletes"
		[ -n "$weakdeps" ] && echo "Suggests: $weakdeps"
	else
		die "$pkg: package not found"
	fi
}

npk_info() {
	local pkg="$1"

	die "Broken"
}

# yes
npk_list() {
	rpm -qa --queryformat='%{NAME}\n' "$rootopt" --dbpath /var/lib/rpm | sort -n | uniq
}

npk_version() {
	printf "%s\n" \
		"neko version $version" \
		"" \
		"Copyright (c) 2016-2020 Ataraxia Linux" \
		"" \
		"This software is licensed under ISC license." \
		"For further information: https://www.isc.org/licenses/" \
		""
	exit 0
}

npk_usage() {
	printf "%s\n" \
		"neko - Next-generation package and configuration manager for Ataraxia Linux" \
		"" \
		"Usage: neko [ACTION] [OPTION...] [FILE...]" \
		"" \
		"Operations:" \
		"   build/bi	Compile package from recipe" \
		"   emerge/em	Compile and install package file" \
		"   info/if	Show information about install package" \
		"   install/in	Install binary package (.rpm) file" \
		"   list|li	List of all packages" \
		"   remove/rm	Remove package from system" \
		"   search/sr	Search for package" \
		"   upgrade/up	Perform system upgrade" \
		"   version	Show version of neko" \
		"   help		Show usage information" \
		"   -c <FILE>	Specify configuration file for neko" \
		"   -m <FILE>	Specify configuration mask for neko" \
		"   -r <DIR>	Specify directory for installing packages" \
		"   -f		Do force installation/build/removal" \
		"" \
		"Options for installing and removing packages:" \
		"   -n		Don't reinstall package" \
		"   -b		Don't backup or restore packages" \
		"   -d		Don't check for dependencies" \
		"   -e		Don't check for conflicts" \
		"   -s		Don't run scripts" \
		"   -t		Don't run triggers" \
		"" \
		"Options for installing and building packages:" \
		"   -C		Don't perform cleanup" \
		"   -D		Don't download source" \
		"   -E		Don't extract sources" \
		"   -B		Don't build package" \
		"   -P		Don't create package" \
		"   -S		Don't perform source integrity checks" \
		"" \
		"BUG TRACKER: https://github.com/ataraxialinux/neko/issues" \
		""
	exit 0
}

main() {
	export LC_ALL="POSIX"

	topdir="$PWD"
	version="MAINVER"
	config="/etc/neko/make.conf"
	maskfile="/etc/neko/mask"
	OPTIONS=('emptydirs' 'strip' 'makeflags' 'locales' 'docs' 'ccache' 'libtool' '~bootstrap' '~embedded')

	force="no"
	bootstrap="no"
	needed="no"
	nodepends="no"
	noconflicts="no"
	noscripts="no"
	notriggers="no"
	noclean="no"
	nodownload="no"
	noextract="no"
	nobuild="no"
	nopackage="no"
	nosums="no"

	case $1 in
		build|bi) shift; mode="npk_build" ;;
		emerge|em) shift; mode="npk_emerge" ;;
		info|if) shift; mode="npk_info" ;;
		install|in) shift; mode="npk_install" ;;
		list|li) shift; mode="npk_list" ;;
		remove|rm) shift; mode="npk_remove" ;;
		search|sr) shift; mode="npk_search" ;;
		sync|sy) shift; mode="npk_sync" ;;
		upgrade|up) shift; mode="npk_upgrade" ;;
		version) npk_version ;;
		*|help) npk_usage ;;
	esac

	while getopts :fwndestCDEBPSc:m:r: opts; do
		case $opts in
			c) config="$(realpath $OPTARG)" ;;
			m) maskfile="$(realpath $OPTARG)" ;;
			r) rootdir="$(realpath $OPTARG)"; rootdir="${rootdir%/}" ;;
			f) force="yes" ;;
			w) bootstrap="yes" ;;
			n) needed="yes" ;;
			d) nodepends="yes" ;;
			e) noconflicts="yes" ;;
			s) noscripts="yes" ;;
			t) notriggers="yes" ;;
			C) noclean="yes" ;;
			D) nodownload="yes" ;;
			E) noextract="yes" ;;
			B) nobuild="yes" ;;
			P) nopackage="yes" ;;
			S) nosums="yes" ;;
		esac
	done
	shift $((OPTIND - 1))

	check_root
	source_config

	[ "$force" = "yes" ] || [ "$noconflicts" = "yes" ] && local forceopt="--force"
	[ "$nodepends" = "yes" ] && depopt="--nodeps"
	[ "$noscripts" = "yes" ] && scriptsopt="--noscripts"
	[ "$notriggers" = "yes" ] && triggersopt="--notriggers"
	[ "$bootstrap" = "yes" ] && bootopt="--ignorearch"
	[ "$rootdir" ] && rootopt="--root=$rootdir"

	[ "$bootstrap" = "yes" ] && export USEBOOTSTRAP="yes"

	if [ "$mode" = "npk_upgrade" ] || [ "$mode" = "npk_sync" ] || [ "$mode" = "npk_build" ] || [ "$mode" = "npk_list" ]; then
		$mode
	else
		for pkg in "$@"; do
			$mode $pkg
		done
	fi
}

main "$@"

exit 0

